// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
   directUrl = env("DIRECT_DATABASE_URL")
}

enum VerificationStatus {
  PENDING
  IN_PROGRESS
  VERIFIED
  REJECTED
}

enum ProductStatus {
  ACTIVE
  DEACTIVATED
}

enum WithdrawalFrequency {
  QUARTERLY
  ANNUAL
  MATURITY
}

enum UserInvestmentStatus {
  ACTIVE
  MATURED
  WITHDRAWN
  WITHDRAWN_PREMATURELY
}

enum WithdrawalStatus {
  PROCESSING
  COMPLETED
}

enum WithdrawalType {
  PRE_MATURITY_EXIT
  SCHEDULED_PAYOUT
  MATURITY_EXIT
}

enum ProductType {
  SIP
  LUMPSUM
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
}
enum VoucherType {
  BANK_RECEIPT
  BANK_PAYMENT
  JOURNAL_VOUCHER
  BOOK_VOUCHER
}

enum TransactionMethod {
  UPI
  NEFT
}

enum TransactionStatus {
  PENDING   // Transaction initiated but not confirmed/processed
  APPROVED // Transaction successfully processed (funds are considered moved)
  REJECTED // Transaction cancelled by user or system
}

model User {
  id                String            @id @default(uuid())
  password          String
  referralCode      String?           
  mobileNumber      String            @unique
  mobileVerified    Boolean           @default(false)
  email             String            @unique
  emailVerified     Boolean           @default(false)
  firstName         String
  lastName          String
  dateOfBirth       DateTime
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  address           Address?
  identityDetails   IdentityDetails?
  bankDetails       BankDetails?
  verificationState VerificationStatus @default(PENDING)
  otps              OTP[]
  fundTransactions  FundTransaction[]
  investments       UserInvestment[]
  availableBalance  Decimal           @default(0)
  withdrawalDetails WithdrawalDetails[] // Relation to all withdrawal attempts made by this user
}


model IdentityDetails {
  id              String   @id @default(uuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id])
  panNumber       String   @unique
  panAttachment   String   // URL to stored document
  aadharNumber    String   @unique
  aadharFront     String   // URL to stored document
  aadharBack      String   // URL to stored document
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Address {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  line1     String
  line2     String?
  city      String
  pincode   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BankDetails {
  id                String   @id @default(uuid())
  userId           String   @unique
  user             User     @relation(fields: [userId], references: [id])
  accountNumber    String   @unique
  ifscCode         String
  branchName       String
  proofAttachment  String   // URL to stored document
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  withdrawals      FundTransaction[]
}

model OTP {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  type      OTPType
  code      String
  expiresAt DateTime
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())
}

enum OTPType {
  EMAIL_VERIFICATION
  MOBILE_VERIFICATION
}

model FundTransaction {
  id              String    @id @default(uuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  type            TransactionType  
  method          TransactionMethod
  voucherType     VoucherType
  Narration       String?
  debitAmount     Decimal?
  creditAmount    Decimal?
  status          TransactionStatus @default(PENDING) 
  referenceNumber Int?      
  bankDetailsId   String?         
  bankDetails     BankDetails?     @relation(fields: [bankDetailsId], references: [id])
  remark          String?         
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  balance         Decimal?
  withdrawalDetails WithdrawalDetails? // Link to withdrawal details if this transaction is a payout
}

model InvestmentPlan {
  id                 String        @id @default(uuid())
  name               String        // Product Name (Admin Input)
  roiAAR             Decimal       // Annual ROI (Admin Input)
  roiAMR             Decimal       // Monthly ROI = roiAAR / 12
  minInvestment      Decimal       // Minimum Investment (Admin Input)
  investmentTerm     Int           // Term in Years (Admin Input)
  totalGain          Decimal       // Calculated: minInvestment * roiAAR * investmentTerm
  maturityValue      Decimal       // Calculated: minInvestment + totalGain
  status             ProductStatus @default(ACTIVE)
  type               ProductType
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  investments        UserInvestment[]
}

model UserInvestment {
  id                 String               @id @default(cuid())
  investedAmount     Float                // Consider using Decimal for financial precision
  investmentDate     DateTime             @default(now())
  maturityDate       DateTime             // Calculated on creation
  totalMaturedValue  Decimal?             // Final value calculated at maturityDate
  withdrawalFrequency WithdrawalFrequency // User's choice for this investment
  status             UserInvestmentStatus @default(ACTIVE)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  userId             String
  payoutInstallmentCount Int?          
  user               User                 @relation(fields: [userId], references: [id])
  investmentPlanId   String
  investmentPlan     InvestmentPlan       @relation(fields: [investmentPlanId], references: [id])
  withdrawalDetails  WithdrawalDetails[]  // Relation to all withdrawal attempts for this investment

  @@index([userId])
  @@index([investmentPlanId])
}

model WithdrawalDetails {
  id                       String           @id @default(uuid())
  userInvestmentId         String
  userInvestment           UserInvestment   @relation(fields: [userInvestmentId], references: [id])
  userId                   String
  user                     User             @relation(fields: [userId], references: [id])

  type                     WithdrawalType
  status                   WithdrawalStatus @default(PROCESSING)

  installmentLeft          Int?

  initiatedAt              DateTime         @default(now())
  processedAt              DateTime?

  grossAmount              Decimal?
  netAmountPaid            Decimal
  
  lockInStageAchieved      Int?
  expensePercentageApplied Decimal?
  expenseAmountDeducted    Decimal?

  fundTransactionId        String?          @unique
  fundTransaction          FundTransaction? @relation(fields: [fundTransactionId], references: [id])

  createdAt                DateTime         @default(now())
  updatedAt                DateTime         @updatedAt

  @@index([userInvestmentId])
  @@index([userId])
  @@index([status])
  @@index([type])
}